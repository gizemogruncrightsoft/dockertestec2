version: "3.5"

services:
  webserver:
    build:
      context: ./bin/${PHPVERSION}
    container_name: "${COMPOSE_PROJECT_NAME}-${PHPVERSION}"
    restart: "always"
    ports:
      - "${HOST_MACHINE_UNSECURE_HOST_PORT}:80"
      - "${HOST_MACHINE_SECURE_HOST_PORT}:443"
    links:
      - database
    volumes:
      - ${DOCUMENT_ROOT-./www}:/var/www/html:rw
      - ${PHP_INI-./config/php/php.ini}:/usr/local/etc/php/php.ini
      - ${SSL_DIR-./config/ssl}:/etc/apache2/ssl/
      - ${VHOSTS_DIR-./config/vhosts}:/etc/apache2/sites-enabled
      - ${LOG_DIR-./logs/apache2}:/var/log/apache2
      - ${XDEBUG_LOG_DIR-./logs/xdebug}:/var/log/xdebug
      - ${CORE_DOCROOT}:/var/hosts/venueos-core
      - ${SIGNAGE_DOCROOT}:/var/hosts/venueos-signage
      - ${ADMIN_DOCROOT}:/var/hosts/venueos-admin
      - ${CHECKIN_DOCROOT}:/var/hosts/venueos-checkin
      - ${LEGACY_DOCROOT}:/var/hosts/venueos-legacy
      - ${PAYMENTS_DOCROOT}:/var/hosts/venueos-payments
      - ${STOCK_DOCROOT}:/var/hosts/venueos-stock
      - ${ORDER_DOCROOT}:/var/hosts/venueos-order
    environment:
      APACHE_DOCUMENT_ROOT: ${APACHE_DOCUMENT_ROOT-/var/www/html}
      PMA_PORT: ${HOST_MACHINE_PMA_PORT}
      APACHE_PORT: ${HOST_MACHINE_UNSECURE_HOST_PORT}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      HOST_MACHINE_MYSQL_PORT: ${HOST_MACHINE_MYSQL_PORT}
      XDEBUG_CONFIG: "client_host=host.docker.internal remote_port=${XDEBUG_PORT}"
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "venueos-core:host-gateway"
      - "venueos-admin:host-gateway"
      - "venueos-signage:host-gateway"
      - "venueos-checkin:host-gateway"
      - "venueos-legacy:host-gateway"
      - "venueos-payments:host-gateway"
      - "venueos-stock:host-gateway"
      - "venueos-order:host-gateway"
    networks:
      - igb-network
  database:
    build:
      context: "./bin/${DATABASE}"
    container_name: "${COMPOSE_PROJECT_NAME}-${DATABASE}"
    restart: "always"
    ports:
      - "127.0.0.1:${HOST_MACHINE_MYSQL_PORT}:3306"
    volumes:
      - ${MYSQL_INITDB_DIR-./config/initdb}:/docker-entrypoint-initdb.d
      - ${MYSQL_DATA_DIR-./data/mysql}:/var/lib/mysql
      - ${MYSQL_LOG_DIR-./logs/mysql}:/var/log/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    healthcheck:
      test: mysqladmin ping -h localhost -uroot -ppassword || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - igb-network
  phpmyadmin:
    image: phpmyadmin
    container_name: "${COMPOSE_PROJECT_NAME}-phpmyadmin"
    links:
      - database
    environment:
      PMA_HOST: database
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      UPLOAD_LIMIT: ${UPLOAD_LIMIT}
      MEMORY_LIMIT: ${MEMORY_LIMIT}
    ports:
      - "${HOST_MACHINE_PMA_PORT}:80"
      - "${HOST_MACHINE_PMA_SECURE_PORT}:443"
    volumes:
      - /sessions
      - ${PHP_INI-./config/php/php.ini}:/usr/local/etc/php/conf.d/php-phpmyadmin.ini
    networks:
      - igb-network
  redis:
    container_name: "${COMPOSE_PROJECT_NAME}-redis"
    image: redis:latest
    ports:
      - "127.0.0.1:${HOST_MACHINE_REDIS_PORT}:6379" 
    healthcheck:
      test: redis-cli -a password --raw incr ping || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - igb-network    
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    environment:
      - STORAGE_TYPE=mem
      # Uncomment to disable scribe
      # - SCRIBE_ENABLED=false
      # Uncomment to enable self-tracing
      # - SELF_TRACING_ENABLED=true
      # Uncomment to enable debug logging
      # - JAVA_OPTS=-Dlogging.level.zipkin=DEBUG
    ports:
      - "9411:9411"
    networks:
      - igb-network


  rabbitmq:
    build:
      context: .
      dockerfile: rabbitmq.Dockerfile
    container_name: 'rabbitmq'
    restart: always
    environment:
      DEFAULT_USER: guest
      DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    volumes:
      - ~/.docker-conf/igb/rabbitmq/data/:/var/lib/rabbitmq
      - ~/.docker-conf/igb/rabbitmq/log/:/var/log/rabbitmq
      - ./rabbitmq_enabled_plugins:/etc/rabbitmq/enabled_plugins
    healthcheck:
      test: rabbitmq-diagnostics -q ping || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - igb-network
  
  
  paymentservice-api:
    build:
      context: .
      dockerfile: ./PaymentService.ApiHost.Dockerfile
    container_name: 'paymentservice-api'
    restart: always
    ports:
      - "8280:80"
    healthcheck:
      test: wget --spider --tries=1 --no-verbose http://localhost:80/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      paymentservice-backend:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ASPNETCORE_Environment=Development
      - ConnectionStrings__Redis=redis:6379,password=password,ssl=False,abortConnect=False
      - ConnectionStrings__Database=Server=mysql;UserId=root;Password=tiger;Database=payment_service
      - RabbitMq__Host=rabbitmq
      - RabbitMq__VHost=paymentservice
      - RabbitMq__Port=5672
      - RabbitMq__User=paymentservice
      - RabbitMq__Pass=123456
    networks:
      - igb-network

  paymentservice-backend:
    build:
      context: .
      dockerfile: ./PaymentService.ServiceHost.Dockerfile
    container_name: 'paymentservice-backend'
    restart: always
    ports:
      - "8281:80"
    healthcheck:
      test: wget --spider --tries=1 --no-verbose http://localhost:80/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ASPNETCORE_Environment=MockTerminal
      - ConnectionStrings__Redis=redis:6379,password=password,ssl=False,abortConnect=False
      - ConnectionStrings__Database=Server=database;Port=3306;UserId=root;Password=tiger;Database=payment_service
      - RabbitMq__Host=rabbitmq
      - RabbitMq__VHost=paymentservice
      - RabbitMq__Port=5672
      - RabbitMq__User=paymentservice
      - RabbitMq__Pass=123456
      - Adyen__KeyIdentifier=Test Key
      - Adyen__Password=<put password here>
      - Venue__Currency=GBP
      - Venue__MerchantAccount=RightsoftLTDECOM
      - Venue__PaymentManagerEndpointUrl=http://paymentmanager-api:8180
      - Venue__VenueId=650453ef-63ac-43e9-ae69-9e9f8afe3773
      - Venue__ApiKey=apikey1
      - Venue__PosBackendEndpointUrl=http://posbackendurl

    networks:
      - igb-network

  paymentservice-hangfire:
    build:
      context: .
      dockerfile: ./PaymentService.HangfireHost.Dockerfile
    container_name: 'paymentservice-hangfire'
    restart: always
    ports:
      - "8282:80"
    healthcheck:
      test: wget --spider --tries=1 --no-verbose http://localhost:80/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ASPNETCORE_Environment=Development
      - ConnectionStrings__Redis=redis:6379,password=password,ssl=False,abortConnect=False
      - ConnectionStrings__Database=Server=mysql;UserId=root;Password=password;Database=payment_service
      - RabbitMq__Host=rabbitmq
      - RabbitMq__VHost=paymentservice
      - RabbitMq__Port=5672
      - RabbitMq__User=paymentservice
      - RabbitMq__Pass=123456
    networks:
      - igb-network
   
networks:
  igb-network:
  
  